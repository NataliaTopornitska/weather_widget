{"mappings":"AAAA;AAEA,MAAM,SAAS;AACf,MAAM,YAAY,SAAS,aAAa,CAAC;AACzC,MAAM,YAAY,SAAS,aAAa,CAAC;AACzC,MAAM,aAAa,SAAS,aAAa,CAAC;AAC1C,MAAM,kBAAkB,SAAS,aAAa,CAAC;AAC/C,MAAM,qBAAqB,SAAS,aAAa,CAAC;AAClD,MAAM,qBAAqB,SAAS,aAAa,CAAC;AAClD,MAAM,kBAAkB,SAAS,aAAa,CAAC;AAC/C,MAAM,qBAAqB,SACxB,aAAa,CAAC;AAEjB,SAAS,kBAAkB,IAAI;IAC7B,MAAM,WAAW,KAAK,IAAI;IAC1B,MAAM,cAAc,CAAC,EAAE,KAAK,KAAK,CAAC,KAAK,IAAI,CAAC,IAAI,EAAE,CAAC;IACnD,MAAM,qBAAqB,KAAK,OAAO,CAAC,EAAE,CAAC,WAAW;IACtD,MAAM,WAAW,KAAK,OAAO,CAAC,EAAE,CAAC,IAAI;IACrC,MAAM,OAAO,IAAI;IACjB,MAAM,WAAW,KAAK,cAAc,CAAC,SAAS;QAC5C,SAAS;QAAQ,MAAM;QAAW,QAAQ;IAC5C;IAEA,gBAAgB,WAAW,GAAG;IAC9B,mBAAmB,WAAW,GAAG;IAEjC,mBAAmB,GAAG,GACnB,CAAC,kCAAkC,EAAE,SAAS,CAAC,GAC/C,CAAC,OAAO,CAAC;IACZ,gBAAgB,WAAW,GAAG;IAE9B,mBAAmB,WAAW,GAC5B,CAAC,EAAE,mBAAmB,MAAM,CAAC,GAAG,WAAW,GAAG,CAAC,GAC/C,mBAAmB,KAAK,CAAC;AAC7B;AAEA,eAAe,aAAa,IAAI;IAC9B,IAAI;QACF,MAAM,WAAW,MAAM,MACrB,CAAC,kDAAkD,EAAE,KAAK,CAAC,GACzD,CAAC,OAAO,EAAE,OAAO,aAAa,CAAC;QAEnC,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,IAAI,KAAK,GAAG,KAAK,KACf,kBAAkB;IAItB,EAAE,OAAO,OAAO,CAEhB;AACF;AAEA,UAAU,gBAAgB,CAAC,SAAS;IAClC,MAAM,OAAO,UAAU,KAAK,CAAC,IAAI;IAEjC,IAAI,MACF,aAAa;AAEjB;AAEA,eAAe;IACb,IAAI;QACF,IAAI,UAAU,WAAW,EACvB,UAAU,WAAW,CAAC,kBAAkB,CAAC,OAAM;YAC7C,MAAM,MAAM,SAAS,MAAM,CAAC,QAAQ;YACpC,MAAM,MAAM,SAAS,MAAM,CAAC,SAAS;YAErC,IAAI;gBACF,MAAM,WAAW,MAAM,MACrB,CAAC,oDAAoD,EAAE,IAAI,CAAC,GAC1D,CAAC,KAAK,EAAE,IAAI,OAAO,EAAE,OAAO,aAAa,CAAC;gBAE9C,MAAM,OAAO,MAAM,SAAS,IAAI;gBAEhC,IAAI,KAAK,GAAG,KAAK,KACf,kBAAkB;qBAElB,iBAAiB;YAErB,EAAE,OAAO,OAAO;gBACd,iBAAiB,kCAAkC,MAAM,OAAO;YAClE;QACF,GACA,CAAC;YACC,iBAAiB,wBAAwB,MAAM,OAAO;QACxD;aAEA,iBAAiB;IAErB,EAAE,OAAO,OAAO;QACd,iBAAiB,uBAAuB,MAAM,OAAO;IACvD;AACF;AAEA,SAAS,iBAAiB,OAAO;IAC/B,MAAM,eAAe,SAAS,aAAa,CAAC;IAE5C,aAAa,WAAW,GAAG;IAC3B,aAAa,KAAK,GAAG;IAGrB,SAAS,IAAI,CAAC,WAAW,CAAC;IAE1B,WAAW,IAAM,aAAa,MAAM,IAAI;AAC1C;AAEA,WAAW,gBAAgB,CAAC,SAAS;IACnC;AACF;AAEA,aAAa","sources":["src/scripts/main.js"],"sourcesContent":["'use strict';\n\nconst apiKey = '31c7df93fe54a4ba72b947868403b5cd';\nconst cityInput = document.querySelector('#search');\nconst searchBtn = document.querySelector('#searchButton');\nconst currentBtn = document.querySelector('#currentButton');\nconst locationElement = document.querySelector('#city');\nconst temperatureElement = document.querySelector('#temperature');\nconst weatherIconElement = document.querySelector('#icon');\nconst dateTimeElement = document.querySelector('.weather-widget__date');\nconst descriptionElement = document\n  .querySelector('.weather-widget__description');\n\nfunction updateWeatherData(data) {\n  const location = data.name;\n  const temperature = `${Math.round(data.main.temp)}`;\n  const weatherDescription = data.weather[0].description;\n  const iconCode = data.weather[0].icon;\n  const date = new Date();\n  const dateTime = date.toLocaleString('en-GB', {\n    weekday: 'long', hour: '2-digit', minute: '2-digit',\n  });\n\n  locationElement.textContent = location;\n  temperatureElement.textContent = temperature;\n\n  weatherIconElement.src\n   = `https://openweathermap.org/img/wn/${iconCode}`\n   + `@2x.png`;\n  dateTimeElement.textContent = dateTime;\n\n  descriptionElement.textContent\n  = `${weatherDescription.charAt(0).toUpperCase()}`\n  + weatherDescription.slice(1);\n}\n\nasync function fetchWeather(city) {\n  try {\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}`\n      + `&appid=${apiKey}&units=metric`,\n    );\n    const data = await response.json();\n\n    if (data.cod === 200) {\n      updateWeatherData(data);\n    } else {\n\n    }\n  } catch (error) {\n\n  }\n}\n\nsearchBtn.addEventListener('click', () => {\n  const city = cityInput.value.trim();\n\n  if (city) {\n    fetchWeather(city);\n  }\n});\n\nasync function getCurrentWeather() {\n  try {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(async(position) => {\n        const lat = position.coords.latitude;\n        const lon = position.coords.longitude;\n\n        try {\n          const response = await fetch(\n            `https://api.openweathermap.org/data/2.5/weather?lat=${lat}`\n            + `&lon=${lon}&appid=${apiKey}&units=metric`,\n          );\n          const data = await response.json();\n\n          if (data.cod === 200) {\n            updateWeatherData(data);\n          } else {\n            showErrorMessage('Error: City not found or invalid coordinates.');\n          }\n        } catch (error) {\n          showErrorMessage('Error fetching weather data: ' + error.message);\n        }\n      },\n      (error) => {\n        showErrorMessage('Geolocation error: ' + error.message);\n      });\n    } else {\n      showErrorMessage('Geolocation is not supported by this browser.');\n    }\n  } catch (error) {\n    showErrorMessage('Unexpected error: ' + error.message);\n  }\n}\n\nfunction showErrorMessage(message) {\n  const errorMessage = document.createElement('div');\n\n  errorMessage.textContent = message;\n  errorMessage.style = 'color: red; position: fixed; top: 10px; left: 50%; ' +\n  'transform: translateX(-50%); background: #f8d7da; padding: 10px; ' +\n  'border: 1px solid #f5c6cb; border-radius: 5px;';\n  document.body.appendChild(errorMessage);\n\n  setTimeout(() => errorMessage.remove(), 3000);\n}\n\ncurrentBtn.addEventListener('click', () => {\n  getCurrentWeather();\n});\n\nfetchWeather('Lviv');\n"],"names":[],"version":3,"file":"index.f75de5e1.js.map","sourceRoot":"/__parcel_source_root/"}